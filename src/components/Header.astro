---
import { Image } from "astro:assets";
import Logo from "../assets/images/BekuBlueFishLogo.svg";
---

<div class="backdrop-area">
    <div class="header-container">
        <header>
            <a href="/"
                ><Image
                    src={Logo}
                    alt="Beku.blue fish logo"
                    height="25"
                    width="25"
                    class="logo"
                /></a>
            <button
                aria-controls="primary-navigation"
                aria-expanded="false"
                class="menu-toggle-button"
            >
                <p class="hamburger-icon">XX</p>
                <p class="close-icon">XXX</p>
            </button>
            <nav class="primary-navigation">
                <ul role="list">
                    <li><a href="#">Game Reviews</a></li>
                    <li><a href="/about">Blog</a></li>
                    <!--<li><a href="#">Design</a></li>-->
                    <li><a href="/about">About</a></li>
                </ul>
            </nav>
        </header>
    </div>
</div>

<style is:global>
    @import "../styles/media-queries.css";

    /* Should I add locally scoped variables here?
    - Font weight of a
    - Color of a
    - Color of a hover
    */

    .logo {
        margin-left: 0.25rem;
    }
    .backdrop-area {
        width: 100%;
        height: var(--navbar-height)
    }
    .header-container {
        width: 100%;
        position: fixed;
        background-color: blue;
        z-index: 10;
    }
    header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-inline: auto;
        max-width: var(--base-layout-max-width);
        padding-inline: var(--side-gap-padding);
        padding-block: var(--space-xs);
        height: var(--navbar-height);
        border: 1px solid red;
    }
    .primary-navigation ul {
        display: flex;
        gap: 1rem;
        & li a {
            padding: var(--space-s);
            color: var(--color-neutral-500);
            text-decoration: none;
            transition: var(--transition-normal) color;
            font-weight: var(--font-weight-semi-bold);
            &:hover,
            &:focus-within {
                color: var(--color-accent-200);
            }
        }
    }
    .menu-toggle-button {
        display: none;
    }

    @media (--viewport-s) {
        .primary-navigation ul {
            display: none;
        }
        .menu-toggle-button {
            display: block;
            position: absolute;
            z-index: 30;
            right: 1rem;
            background-color: transparent;
            padding: 1rem;
            border: 0;
            & .close-icon {
                display: none;
            }
        }
        [aria-expanded="true"] {
            .close-icon {
                display: block;
            }
            .hamburger-icon {
                display: none;
            }
        }
        [aria-expanded="true"] ~ nav {
            display: block;
            position: fixed;
            top: 0;
            right: 0;
            bottom: 0;
            width: 80%;
            margin-left: auto;
            box-shadow: 0 0 0 100vmax hsl(0 0 0 / 0.7);
            background-color: var(--color-neutral-900);
            z-index: 20;
            ul {
                margin-top: 20vh;
                display: grid;
                gap: 2rem;
                margin-left: max(3rem, 20vw);
            }
        }
    }
</style>

<script>
    function setupNavigation() {
        const navigationToggle = document.querySelector(
            '[aria-controls="primary-navigation"]',
        ) as HTMLButtonElement | null;
        const navigation = document.querySelector('.primary-navigation') as HTMLElement | null;

        if (!navigationToggle || !navigation) return;

        const closeMenu = (event: Event) => {
            if (navigation.contains(event.target as Node)) return;
            navigationToggle.setAttribute("aria-expanded", "false");
        };

        const toggleMenu = (event: Event) => {
            event.stopPropagation();
            const navigationOpened = navigationToggle.getAttribute("aria-expanded");
            navigationToggle.setAttribute(
                "aria-expanded",
                navigationOpened === "false" ? "true" : "false",
            );
        };

        navigationToggle.removeEventListener("click", toggleMenu);
        document.removeEventListener("click", closeMenu);

        navigationToggle.addEventListener("click", toggleMenu);
        document.addEventListener("click", closeMenu);
    }

    setupNavigation();

    document.addEventListener("astro:after-swap", setupNavigation);
</script>
