---
import type { getCollection, CollectionEntry } from "astro:content";
import BaseLayout from "../layouts/BaseLayout.astro";
import { Image } from "astro:assets";
import { generateToC } from "../components/toc/generateToC";
import Icon from "../components/Icon.astro";
import CultOfTheLamb from "../assets/images/games/Cult-Of-The-Lamb-Header.jpg";
import SideCard from "../components/SideCard.astro";
import GameCard from "../components/GameCard.astro";
import TableOfContentsList from "../components/toc/TableOfContentsList.astro";

interface Props {
	post: CollectionEntry<"reviews"> | CollectionEntry<"posts">;
}
const { post } = Astro.props;
const { headings } = await post.render();
---

<BaseLayout title={post.data.title} description={post.data.description}>
	<div class="base-layout">
		<div class="post-container">
			<div class="post-container-left-middle">
				<aside class="aside-container-left">
					<SideCard title="Game Info">
						<p><small>Platforms</small></p>
						<p>PC, Xbox, Switch...</p>
						<p><small>Release date</small></p>
						<p>May 5, 2023</p>
						<p><small>Developer</small></p>
						<p>Someone</p>
					</SideCard>
					<SideCard title="Price">
						<p><small>Current price (Steam)</small></p>
						<p>15,50€</p>
						<p><small>Current most low</small></p>
						<p>14,52€</p>
						<p><small>All time low</small></p>
						<p>8,89€</p>
					</SideCard>
					<div>
						<Icon name="star" label="icon" size="1.5rem" /><p>
							Steam
						</p>
					</div>
					<div>
						<Icon name="star" label="icon" size="1.5rem" /><p>
							GOG
						</p>
					</div>
					<SideCard title="Tags">
						<p>Indie, Action, 2024, Pixel-style</p>
					</SideCard>
					<div class="toc">
						<div class="sticky-element">
							<Icon
								name="bars"
								label="Table of Content icon"
								size="1.5rem"
							/>
							<div class="toc-items">
								<TableOfContentsList
									toc={generateToC(headings, {
										minHeadingLevel: 1,
										maxHeadingLevel: 6,
										title: post.data.title,
									})}
								/>
							</div>
						</div>
					</div>
				</aside>
				<main
					class="height-smart-fill-screen set-main-content-max-width main-content"
				>
					<Image
						src={post.data.hero as ImageMetadata}
						alt={post.data.heroAlt}
						class="hero-image"
					/>
					<div class="cover-container">
						<Image
							src={post.data.cover as ImageMetadata}
							alt={post.data.coverAlt}
							class="cover-image"
						/>
					</div>
					<div class="flow">
						<h1>{post.data.title}</h1>
						<slot />
					</div>
				</main>
			</div>
			<aside class="aside-container-right">
				<SideCard title="Similar Games">
					<ul role="list" class="similar-games-list">
						<li>
							<GameCard
								title={post.data.title}
								description={post.data.description}
								link={`/games/${post.slug}`}
								cover={post.data.cover}
								coverAlt={post.data.coverAlt}
								borderColor="var(--color-neutral-500)"
							/>
						</li>
						<li>
							<GameCard
								title={post.data.title}
								description={post.data.description}
								link={`/games/${post.slug}`}
								cover={post.data.cover}
								coverAlt={post.data.coverAlt}
								borderColor="var(--color-neutral-500)"
							/>
						</li>
					</ul>
				</SideCard>
				<SideCard title="Relevant Blog Posts">
					<ul role="list" class="relevant-blog-posts-list">
						<li>
							<GameCard
								title={post.data.title}
								description={post.data.description}
								link={`/games/${post.slug}`}
								cover={post.data.cover}
								coverAlt={post.data.coverAlt}
								borderColor="var(--color-neutral-500)"
							/>
						</li>
					</ul>
				</SideCard>
				<SideCard title="Latest Posts">
					<ul role="list" class="lastest-posts-list">
						<li>
							<GameCard
								title={post.data.title}
								description={post.data.description}
								link={`/games/${post.slug}`}
								cover={post.data.cover}
								coverAlt={post.data.coverAlt}
								borderColor="var(--color-neutral-500)"
							/>
						</li>
						<li>
							<GameCard
								title={post.data.title}
								description={post.data.description}
								link={`/games/${post.slug}`}
								cover={post.data.cover}
								coverAlt={post.data.coverAlt}
								borderColor="var(--color-neutral-500)"
							/>
						</li>
					</ul>
				</SideCard>
				<SideCard title="E-Mail Newsletter">
					<p>
						Also have a e-mail newsletter for you to stay up to
						date.
					</p>
				</SideCard>
				<div class="social-media-aside-container">
					<a href="#"
						><Icon
							name="instagram"
							label="Instagram icon"
							size="1.5rem"
						/></a
					>
					<a href="#"
						><Icon
							name="mastodon"
							label="Mastodon icon"
							size="1.5rem"
						/></a
					>
					<a href="#"
						><Icon
							name="threads"
							label="Threads icon"
							size="1.5rem"
						/></a
					>
				</div>
			</aside>
		</div>
	</div>
</BaseLayout>

<style>
	.base-layout {
	}
	.post-container {
		display: flex;
		flex-wrap: wrap;
		flex-direction: column;
		justify-content: center;
		gap: var(--space-xl);
	}
	main {
		margin-inline: auto;
	}
	.post-container-left-middle {
		display: flex;
		flex-direction: column-reverse;
		gap: var(--space-xl);
		border: 1px solid red;
		justify-content: center;
	}

	.hero-image {
		width: 100%;
		height: auto;
		max-height: 350px;
		min-height: 120px;
		object-fit: cover;
		filter: grayscale(40%);
	}
	.cover-container {
		--_yoffset: -120px;

		transform: translateY(var(--_yoffset));
		margin-bottom: calc(var(--_yoffset) + var(--space-m));
		margin-inline: var(--space-s);
		min-height: 150px;
		margin-top: 20px;

		.cover-image {
			border-radius: var(--border-radius-m);
			max-width: min(100%, 460px);
			object-fit: cover;
			aspect-ratio: 2 / 1;
			width: auto;
			height: auto;
			margin-inline: auto;
		}
	}
	.aside-container-left {
		display: flex;
		flex-direction: column;
		gap: var(--space-l);
		min-width: 220px;
		margin-inline: auto;
		max-width: 550px;
	}

	.aside-container-right {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		justify-content: center;
		gap: var(--space-l);
		height: fit-content;
		> div {
			height: 10px;
		}
		ul li {
			max-width: 300px;
		}
		ul li:not(:last-of-type) {
			padding-bottom: var(--space-m);
		}
	}
	.social-media-aside-container {
		display: flex;
		justify-content: center;
		flex-direction: row;
		flex-wrap: wrap;
		padding-inline: var(--space-s);
		padding-block: var(--space-s);
		gap: var(--space-s);
	}

	@media only screen and (min-width: 1350px) {
		.post-container {
			flex-direction: row;
			flex-wrap: nowrap;
		}
		.post-container-left-middle {
			flex-direction: row;
		}
		.aside-container-right {
			max-width: 340px;
		}
	}
	@media only screen and (min-width: 1000px) and (max-width: 1349.99px) {
		.post-container-left-middle {
			flex-direction: row-reverse;
		}
	}

	@media only screen and (min-width: 1000px) {
		.toc {
		}
		.sticky-element {
			transition: all 0.3s; /* Smooth transition for when it becomes fixed */
			z-index: 10;
		}
		.fixed {
			position: fixed;
			top: var(--navbar-height);
			width: max(20svw, 200px);
		}
	}
</style>

<script type="module">
	const observer = new MutationObserver((mutations) => {
		const stickyElement = document.querySelector(".sticky-element");
		if (stickyElement) {
			const stickyOffset = stickyElement.offsetTop;

			const handleScroll = () => {
				if (window.scrollY >= stickyOffset - 50) {
					stickyElement.classList.add("fixed");
				} else {
					stickyElement.classList.remove("fixed");
				}
			};

			window.addEventListener("scroll", handleScroll);

			observer.disconnect();
		}
	});
	observer.observe(document.body, { childList: true, subtree: true });
</script>
