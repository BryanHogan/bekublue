---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import { getEntry, getEntries } from "astro:content";
import BaseLayout from "../layouts/BaseLayout.astro";
import { Image } from "astro:assets";
import { generateToC } from "../components/toc/generateToC";
import Icon from "../components/Icon.astro";
import SideCard from "../components/SideCard.astro";
import GameCard from "../components/GameCard.astro";
import TableOfContentsList from "../components/toc/TableOfContentsList.astro";
import { Icons } from "../components/Icons";
import { fetchGameDataByTitle } from "../utils/rawgapi";

import steamIcon from "../assets/icons/Steam-Icon.svg"
import gogIcon from "../assets/icons/GOG-Icon.svg"

const tinyCardReview = await getEntry("reviews", "cult-of-the-lamb");

interface Props {
	post: CollectionEntry<"reviews"> | CollectionEntry<"posts">;
}
const { post } = Astro.props;
const { headings } = await post.render();

const GAME_TITLE = 'apititle' in post.data ? post.data.apititle : post.data.title;

// GAME PRICES API CALL cheapshark
const response = await fetch('http://localhost:4321/api/game-prices.json');
const gamePrices = await response.json();

const gamePriceData = gamePrices.find((game: any) => game.title === GAME_TITLE);

const currentPrice = gamePriceData ? gamePriceData.currentPrice : "Unavailable";
const cheapestPriceEver = gamePriceData ? gamePriceData.cheapestPriceEver : "Unavailable";
const steamLink = gamePriceData?.steamStoreLink || null;
const gogLink = gamePriceData?.gog?.gogStoreLink || null;

// RAWG API CALL
const { platforms, developers } = await fetchGameDataByTitle(GAME_TITLE);

const authorName = post.data.author?.includes("Bryan@BryanHogan.com") ? "Bryan Hogan" : post.data.author || "Unknown Author";



let similarGames = []
if (post.collection === "reviews") {
	similarGames = await getEntries(post.data.similarGames);
}

let relevantBlogPosts = [];
if (post.collection === "reviews") {
	relevantBlogPosts = await getEntries(post.data.relevantBlogPosts);
}

const [blogPosts, reviewPosts] = await Promise.all([
	getCollection("posts"),
	getCollection("reviews"),
]);
const allPosts = [...blogPosts, ...reviewPosts].sort(
	(a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime(),
);

---

<BaseLayout title={post.data.title} description={post.data.description}>
	<div class="base-layout">
		<div class="post-container">
			<div class="post-container-left-middle">
				<aside class="aside-container-left">
					{ post.collection === "reviews" &&
					<>
						<SideCard title="Game Info">
							<p><small>Platforms</small></p>
							<p style="padding-bottom: 0.375em;">
								{platforms.length > 0 ? platforms.join(", ") : "Unavailable"}
							</p>
							<p><small>Developers</small></p>
							<p>{developers.length > 0 ? developers.join(", ") : "Unavailable"}</p>
						</SideCard>
						{ (currentPrice && cheapestPriceEver) &&
						<SideCard title="Price">
							<p><small>Current price</small></p>
							<p style="padding-bottom: 0.375em;">{currentPrice}$</p>
							<p><small>All time low</small></p>
							<p style="padding-bottom: 0.375em;">{cheapestPriceEver}$</p>
						</SideCard>
						}
						{ steamLink &&
						<div class="store-links-container">
							<a href={steamLink} target="_blank">
								<div>
									<Image src={steamIcon} alt="Steam store icon." />
								</div>
							</a>
							{ gogLink &&
							<a href={gogLink} target="_blank">
								<div>
									<Image src={gogIcon} alt="GOG Galaxy store icon." />
								</div>
							</a>
							}
						</div>
						}
					</>
					}
					<SideCard title="Tags">
						<p>Indie, Action, 2024, Pixel-style</p>
					</SideCard>
					<div class="toc">
						<div class="sticky-element">
							<span class="toc-icon">
								<svg
									width="22"
									height="22"
									viewBox="0 0 24 24"
									fill="currentColor"
									set:html={Icons["rightcaret"]}
								/>
							</span>
							<div class="toc-items">
								<p><strong>Table of Contents</strong></p>
								<TableOfContentsList
									toc={generateToC(headings, {
										minHeadingLevel: 1,
										maxHeadingLevel: 6,
										title: post.data.title,
									})}
								/>
							</div>
						</div>
					</div>
				</aside>
				<main
					class="height-smart-fill-screen set-main-content-max-width main-content"
				>
					<Image
						src={post.data.hero as ImageMetadata}
						alt="altremoval"
						class="hero-image"
					/>
					<div class="cover-container">
						<Image
							src={post.data.cover as ImageMetadata}
							alt="altremoval"
							class="cover-image"
						/>
					</div>
					<div class="flow">
						<h1 id="_top">{post.data.title}</h1>
						<slot />
					</div>
				</main>
			</div>
			<aside class="aside-container-right">
				{(similarGames.length > 0) &&
					<SideCard title="Similar Games">
						<ul role="list" class="similar-games-list">
							{similarGames.map((post: any) => (
								<li>
								<GameCard
									title={post.data.title}
									description={post.data.description}
									link={`/games/${post.slug}`}
									cover={post.data.cover}
									borderColor="var(--color-neutral-500)"
								/>
								</li>
							  ))}
						</ul>
					</SideCard>
				}
				{(relevantBlogPosts.length > 0) &&
					<SideCard title="Relevant Blog Posts">
						<ul role="list" class="relevant-blog-posts-list">
							{relevantBlogPosts.map((post: any) => (
								<li>
									<GameCard
										title={post.data.title}
										description={post.data.description}
										link={`/blog/${post.slug}`}
										cover={post.data.cover}
										borderColor="var(--color-neutral-500)"
									/>
								</li>
							  ))}
						</ul>
					</SideCard>
				}
				<SideCard title="Latest Posts">
					<ul role="list" class="lastest-posts-list">
						{
							allPosts.slice(0, 3).map((post) => (
								<li>
									{post.collection === "reviews" ? (
										<GameCard
											title={post.data.title}
											description={post.data.description}
											link={`/games/${post.slug}`}
											cover={post.data.cover}
											borderColor="var(--color-neutral-500)"
										/>
									) : (
									// @ts-ignore
									<GameCard
										title={post.data.title}
										description={post.data.description}
										link={`/blog/${post.slug}`}
										cover={post.data.cover}
										borderColor="var(--color-neutral-500)"
									/>
									)}
								</li>
							))
						}
					</ul>
				</SideCard>
				<SideCard title="E-Mail Newsletter">
					<form
						action="https://buttondown.com/api/emails/embed-subscribe/BekuBlue"
						method="post"
						target="popupwindow"
						onsubmit="window.open('https://buttondown.com/BekuBlue', 'popupwindow')"
						class="embeddable-buttondown-form flow"
					>
						<label for="bd-email">Also have a e-mail newsletter for you to stay up to
							date:</label>
						<input type="email" name="email" id="bd-email" />
						<input type="submit" value="Subscribe" />
					</form>
				</SideCard>
				<div class="social-media-aside-container" style="padding-bottom: var(--space-xl);">
					<a href="#"
						><Icon
							name="instagram"
							label="Instagram icon"
							size="1.5rem"
						/></a
					>
					<a href="#"
						><Icon
							name="mastodon"
							label="Mastodon icon"
							size="1.5rem"
						/></a
					>
					<a href="#"
						><Icon
							name="threads"
							label="Threads icon"
							size="1.5rem"
						/></a
					>
				</div>
			</aside>
		</div>
		<div class="below-post-information-container margin-inline-auto" style="width: 100%">
				<hr style="width: 100%"/>
			<p class="margin-inline-auto text-align-center">Written by {authorName}</p>
		</div>
	</div>
</BaseLayout>

<style>
	.base-layout {
	}
	.post-container {
		display: flex;
		flex-wrap: wrap;
		flex-direction: column;
		justify-content: center;
		gap: var(--space-xl);
		
	}
	main {
		margin-inline: auto;
	}
	.post-container-left-middle {
		display: flex;
		flex-direction: column-reverse;
		gap: var(--space-xl);
		justify-content: center;
	}

	.hero-image {
		width: 100%;
		height: auto;
		max-height: 350px;
		min-height: 120px;
		object-fit: cover;
		filter: grayscale(40%);
	}
	.cover-container {
		--_yoffset: -120px;

		transform: translateY(var(--_yoffset));
		margin-bottom: calc(var(--_yoffset) + var(--space-m));
		margin-inline: var(--space-s);
		min-height: 150px;
		margin-top: 20px;

		.cover-image {
			border-radius: var(--border-radius-m);
			max-width: min(100%, 460px);
			object-fit: cover;
			aspect-ratio: 2 / 1;
			width: auto;
			height: auto;
			margin-inline: auto;
		}
	}
	.aside-container-left {
		display: flex;
		flex-direction: column;
		gap: var(--space-l);
		min-width: 220px;
		margin-inline: auto;
		max-width: 550px;
	}

	.aside-container-right {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		justify-content: center;
		gap: var(--space-l);
		height: fit-content;
		> div {
			height: 10px;
		}
		ul li {
			max-width: 300px;
		}
		ul li:not(:last-of-type) {
			padding-bottom: var(--space-m);
		}
	}
	.social-media-aside-container {
		display: flex;
		justify-content: center;
		flex-direction: row;
		flex-wrap: wrap;
		padding-inline: var(--space-s);
		padding-block: var(--space-s);
		gap: var(--space-s);
	}

	.store-links-container {
		display: flex;
		flex-direction: row;
		gap: var(--space-m);
		a {
			background-color: var(--color-neutral-800);
			flex-grow: 1;
			display: flex;
			justify-content: center;
			padding-block: var(--space-m);
			border-radius: var(--border-radius-m);

		}
	}

	.embeddable-buttondown-form {
		display: flex;
		flex-direction: column;
		input[type=email] {
			background-color: var(--color-neutral-700);
			border: 1px solid var(--color-neutral-500);
			border-radius: var(--border-radius-s);
		}
		input[type=submit] {
			background-color: var(--color-accent-900);
			width: 60%;
			margin-inline: auto;
			border: 1px solid var(--color-neutral-700);
			border-radius: var(--border-radius-s);
			padding-block: 0.25rem;
			&:hover {
				background-color: var(--color-accent-700);
			}
		}
	}

	.below-post-information-container {
		max-width: calc(var(--main-content-max-width) + (var(--side-gap-padding) * 2));
		padding-top: var(--space-xl);
		> p {
			padding-block: var(--space-m);
		}
	}

	

	@media only screen and (min-width: 1350px) {
		.post-container {
			flex-direction: row;
			flex-wrap: nowrap;
		}
		.post-container-left-middle {
			flex-direction: row;
		}
		.aside-container-right {
			max-width: 340px;
		}
	}
	@media only screen and (min-width: 1000px) and (max-width: 1349.99px) {
		.post-container-left-middle {
			flex-direction: row-reverse;
		}
	}

	@media only screen and (max-width: 999.9px) {
		.toc {
			display: contents;
		}

		.toc-icon {
			position: fixed;
			top: var(--space-xs);
			right: var(--space-xl);
			display: block;
			cursor: pointer;
			padding: var(--space-2xs);
			border-radius: var(--border-radius-m);
			transition: background-color var(--transition-normal);
			z-index: 100;
		}

		.toc-icon:hover,
		.toc-icon:focus-within {
			background-color: var(--color-neutral-800);
		}

		.toc-icon svg {
			transition: transform var(--transition-normal);
		}

		.toc-icon[aria-expanded="true"] svg {
			transform: rotate(90deg);
		}

		.toc-items {
			position: fixed;
			top: calc(var(--navbar-height) + var(--space-m));
			right: 0;
			display: none;
			max-height: calc(100svh - var(--navbar-height) - 75px);
			overflow-y: auto;
			background-color: var(--color-neutral-800);
			border-radius: var(--border-radius-m) 0 0 var(--border-radius-m);
			padding: var(--space-m);
			box-shadow: var(--shadow-m);
			min-width: 200px;
			max-width: calc(100vw - var(--space-xl));
			z-index: 99;
		}

		.toc-icon[aria-expanded="true"] + .toc-items {
			display: block;
			animation: slideInFromRight 0.2s ease-out;
		}
	}

	@keyframes slideInFromRight {
		from {
			opacity: 0;
			transform: translateX(20px);
		}
		to {
			opacity: 1;
			transform: translateX(0);
		}
	}

	@media only screen and (min-width: 1000px) {
		.toc {
			width: 100%;
		}
		.toc-icon {
			display: none;
			padding: 0;
			margin: 0;
		}
		.sticky-element {
			transition: top 0.3s ease;
			z-index: 10;
			width: 100%;
			padding: 1rem;
		}
		.fixed {
			position: fixed;
			top: var(--navbar-height);
			width: var(--aside-width);
		}
	}
</style>

<script>
	function setupStickyToc() {
		const stickyElement = document.querySelector(
			".sticky-element",
		) as HTMLElement;
		const asideContainer = document.querySelector(".aside-container-left");

		if (stickyElement && asideContainer) {
			const updateWidth = () => {
				const asideWidth = asideContainer.getBoundingClientRect().width;
				stickyElement.style.setProperty(
					"--aside-width",
					`${asideWidth}px`,
				);
			};

			const updateOffset = () => {
				return stickyElement.offsetTop;
			};

			let stickyOffset = updateOffset();

			const handleScroll = () => {
				if (!stickyElement.classList.contains("fixed")) {
					stickyOffset = updateOffset();
				}

				if (window.scrollY >= stickyOffset - 50) {
					stickyElement.classList.add("fixed");
				} else {
					stickyElement.classList.remove("fixed");
				}
			};

			const handleResize = () => {
				stickyElement.classList.remove("fixed");
				updateWidth();
				stickyOffset = updateOffset();
				handleScroll();
			};

			updateWidth();

			window.addEventListener("scroll", handleScroll);
			window.addEventListener("resize", handleResize);

			return () => {
				window.removeEventListener("scroll", handleScroll);
				window.removeEventListener("resize", handleResize);
			};
		}
	}

	setupStickyToc();

	document.addEventListener("astro:after-swap", () => {
		setupStickyToc();
	});

	function setupTocToggle() {
		const tocToggle = document.querySelector(
			".toc-icon",
		) as HTMLElement | null;
		const tocItems = document.querySelector(
			".toc-items",
		) as HTMLElement | null;

		if (!tocToggle || !tocItems) return;

		tocToggle.setAttribute("aria-expanded", "false");
		tocToggle.setAttribute("aria-controls", "toc-items");
		tocItems.id = "toc-items";

		const closeToc = (event: Event) => {
			if (
				tocItems.contains(event.target as Node) ||
				tocToggle.contains(event.target as Node)
			)
				return;
			tocToggle.setAttribute("aria-expanded", "false");
		};

		const toggleToc = (event: Event) => {
			event.stopPropagation();
			const isExpanded =
				tocToggle.getAttribute("aria-expanded") === "true";
			tocToggle.setAttribute("aria-expanded", (!isExpanded).toString());
		};

		tocToggle.removeEventListener("click", toggleToc);
		document.removeEventListener("click", closeToc);

		tocToggle.addEventListener("click", toggleToc);
		document.addEventListener("click", closeToc);
	}

	setupTocToggle();

	document.addEventListener("astro:after-swap", setupTocToggle);
</script>
