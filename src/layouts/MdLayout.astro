---
import type { getCollection, CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";
import BaseLayout from "../layouts/BaseLayout.astro";
import { Image } from "astro:assets";
import { generateToC } from "../components/toc/generateToC";
import Icon from "../components/Icon.astro";
import SideCard from "../components/SideCard.astro";
import GameCard from "../components/GameCard.astro";
import TableOfContentsList from "../components/toc/TableOfContentsList.astro";
import { Icons } from "../components/Icons";
import TinyGameCard from "../components/TinyGameCard.astro";

const tinyCardReview = await getEntry("reviews", "cult-of-the-lamb");

interface Props {
	post: CollectionEntry<"reviews"> | CollectionEntry<"posts">;
}
const { post } = Astro.props;
const { headings } = await post.render();

---

<BaseLayout title={post.data.title} description={post.data.description}>
	<p>Price:</p>
	<p>No</p>
	<div class="base-layout">
		<div class="post-container">
			<div class="post-container-left-middle">
				<aside class="aside-container-left">
					<SideCard title="Game Info">
						<p><small>Platforms</small></p>
						<p style="padding-bottom: 0.375em;">
							PC, Xbox, Switch...
						</p>
						<p><small>Release date</small></p>
						<p style="padding-bottom: 0.375em;">May 5, 2023</p>
						<p><small>Developer</small></p>
						<p>Someone</p>
					</SideCard>
					<SideCard title="Price">
						<p><small>Current price (Steam)</small></p>
						<p style="padding-bottom: 0.375em;">15,50€</p>
						<p><small>Current most low</small></p>
						<p style="padding-bottom: 0.375em;">14,52€</p>
						<p><small>All time low</small></p>
						<p>8,89€</p>
					</SideCard>
					<div>
						<Icon name="star" label="icon" size="1.5rem" /><p>
							Steam
						</p>
					</div>
					<div>
						<Icon name="star" label="icon" size="1.5rem" /><p>
							GOG
						</p>
					</div>
					<SideCard title="Tags">
						<p>Indie, Action, 2024, Pixel-style</p>
					</SideCard>
					<div class="toc">
						<div class="sticky-element">
							<span class="toc-icon">
								<svg
									width="22"
									height="22"
									viewBox="0 0 24 24"
									fill="currentColor"
									set:html={Icons["rightcaret"]}
								/>
							</span>
							<div class="toc-items">
								<p><strong>Table of Contents</strong></p>
								<TableOfContentsList
									toc={generateToC(headings, {
										minHeadingLevel: 1,
										maxHeadingLevel: 6,
										title: post.data.title,
									})}
								/>
							</div>
						</div>
					</div>
				</aside>
				<main
					class="height-smart-fill-screen set-main-content-max-width main-content"
				>
					<Image
						src={post.data.hero as ImageMetadata}
						alt={post.data.heroAlt}
						class="hero-image"
					/>
					<div class="cover-container">
						<Image
							src={post.data.cover as ImageMetadata}
							alt={post.data.coverAlt}
							class="cover-image"
						/>
					</div>
					<div class="flow">
						<h1 id="_top">{post.data.title}</h1>
						<slot />
					</div>
				</main>
			</div>
			<aside class="aside-container-right">
				<SideCard title="Similar Games">
					<ul role="list" class="similar-games-list">
						<li>
							<GameCard
								title={post.data.title}
								description={post.data.description}
								link={`/games/${post.slug}`}
								cover={post.data.cover}
								coverAlt={post.data.coverAlt}
								borderColor="var(--color-neutral-500)"
							/>
						</li>
						<li>
							<GameCard
								title={post.data.title}
								description={post.data.description}
								link={`/games/${post.slug}`}
								cover={post.data.cover}
								coverAlt={post.data.coverAlt}
								borderColor="var(--color-neutral-500)"
							/>
						</li>
					</ul>
				</SideCard>
				<SideCard title="Relevant Blog Posts">
					<ul role="list" class="relevant-blog-posts-list">
						<li>
							<GameCard
								title={post.data.title}
								description={post.data.description}
								link={`/games/${post.slug}`}
								cover={post.data.cover}
								coverAlt={post.data.coverAlt}
								borderColor="var(--color-neutral-500)"
							/>
						</li>
					</ul>
				</SideCard>
				<SideCard title="Latest Posts">
					<ul role="list" class="lastest-posts-list">
						<li>
							<GameCard
								title={post.data.title}
								description={post.data.description}
								link={`/games/${post.slug}`}
								cover={post.data.cover}
								coverAlt={post.data.coverAlt}
								borderColor="var(--color-neutral-500)"
							/>
						</li>
						<li>
							<GameCard
								title={post.data.title}
								description={post.data.description}
								link={`/games/${post.slug}`}
								cover={post.data.cover}
								coverAlt={post.data.coverAlt}
								borderColor="var(--color-neutral-500)"
							/>
						</li>
					</ul>
				</SideCard>
				<SideCard title="E-Mail Newsletter">
					<p>
						Also have a e-mail newsletter for you to stay up to
						date.
					</p>
				</SideCard>
				<div class="social-media-aside-container">
					<a href="#"
						><Icon
							name="instagram"
							label="Instagram icon"
							size="1.5rem"
						/></a
					>
					<a href="#"
						><Icon
							name="mastodon"
							label="Mastodon icon"
							size="1.5rem"
						/></a
					>
					<a href="#"
						><Icon
							name="threads"
							label="Threads icon"
							size="1.5rem"
						/></a
					>
				</div>
			</aside>
		</div>
	</div>
</BaseLayout>

<style>
	.base-layout {
	}
	.post-container {
		display: flex;
		flex-wrap: wrap;
		flex-direction: column;
		justify-content: center;
		gap: var(--space-xl);
	}
	main {
		margin-inline: auto;
	}
	.post-container-left-middle {
		display: flex;
		flex-direction: column-reverse;
		gap: var(--space-xl);
		justify-content: center;
	}

	.hero-image {
		width: 100%;
		height: auto;
		max-height: 350px;
		min-height: 120px;
		object-fit: cover;
		filter: grayscale(40%);
	}
	.cover-container {
		--_yoffset: -120px;

		transform: translateY(var(--_yoffset));
		margin-bottom: calc(var(--_yoffset) + var(--space-m));
		margin-inline: var(--space-s);
		min-height: 150px;
		margin-top: 20px;

		.cover-image {
			border-radius: var(--border-radius-m);
			max-width: min(100%, 460px);
			object-fit: cover;
			aspect-ratio: 2 / 1;
			width: auto;
			height: auto;
			margin-inline: auto;
		}
	}
	.aside-container-left {
		display: flex;
		flex-direction: column;
		gap: var(--space-l);
		min-width: 220px;
		margin-inline: auto;
		max-width: 550px;
	}

	.aside-container-right {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		justify-content: center;
		gap: var(--space-l);
		height: fit-content;
		> div {
			height: 10px;
		}
		ul li {
			max-width: 300px;
		}
		ul li:not(:last-of-type) {
			padding-bottom: var(--space-m);
		}
	}
	.social-media-aside-container {
		display: flex;
		justify-content: center;
		flex-direction: row;
		flex-wrap: wrap;
		padding-inline: var(--space-s);
		padding-block: var(--space-s);
		gap: var(--space-s);
	}

	@media only screen and (min-width: 1350px) {
		.post-container {
			flex-direction: row;
			flex-wrap: nowrap;
		}
		.post-container-left-middle {
			flex-direction: row;
		}
		.aside-container-right {
			max-width: 340px;
		}
	}
	@media only screen and (min-width: 1000px) and (max-width: 1349.99px) {
		.post-container-left-middle {
			flex-direction: row-reverse;
		}
	}

	@media only screen and (max-width: 999.9px) {
		.toc {
			display: contents;
		}

		.toc-icon {
			position: fixed;
			top: var(--space-xs);
			right: var(--space-xl);
			display: block;
			cursor: pointer;
			padding: var(--space-2xs);
			border-radius: var(--border-radius-m);
			transition: background-color var(--transition-normal);
			z-index: 100;
		}

		.toc-icon:hover,
		.toc-icon:focus-within {
			background-color: var(--color-neutral-800);
		}

		.toc-icon svg {
			transition: transform var(--transition-normal);
		}

		.toc-icon[aria-expanded="true"] svg {
			transform: rotate(90deg);
		}

		.toc-items {
			position: fixed;
			top: calc(var(--navbar-height) + var(--space-m));
			right: 0;
			display: none;
			max-height: calc(100svh - var(--navbar-height) - 75px);
			overflow-y: auto;
			background-color: var(--color-neutral-800);
			border-radius: var(--border-radius-m) 0 0 var(--border-radius-m);
			padding: var(--space-m);
			box-shadow: var(--shadow-m);
			min-width: 200px;
			max-width: calc(100vw - var(--space-xl));
			z-index: 99;
		}

		.toc-icon[aria-expanded="true"] + .toc-items {
			display: block;
			animation: slideInFromRight 0.2s ease-out;
		}
	}

	@keyframes slideInFromRight {
		from {
			opacity: 0;
			transform: translateX(20px);
		}
		to {
			opacity: 1;
			transform: translateX(0);
		}
	}

	@media only screen and (min-width: 1000px) {
		.toc {
			width: 100%;
		}
		.toc-icon {
			display: none;
			padding: 0;
			margin: 0;
		}
		.sticky-element {
			transition: top 0.3s ease;
			z-index: 10;
			width: 100%;
			padding: 1rem;
		}
		.fixed {
			position: fixed;
			top: var(--navbar-height);
			width: var(--aside-width);
		}
	}
</style>

<script>
	function setupStickyToc() {
		const stickyElement = document.querySelector(
			".sticky-element",
		) as HTMLElement;
		const asideContainer = document.querySelector(".aside-container-left");

		if (stickyElement && asideContainer) {
			const updateWidth = () => {
				const asideWidth = asideContainer.getBoundingClientRect().width;
				stickyElement.style.setProperty(
					"--aside-width",
					`${asideWidth}px`,
				);
			};

			const updateOffset = () => {
				return stickyElement.offsetTop;
			};

			let stickyOffset = updateOffset();

			const handleScroll = () => {
				if (!stickyElement.classList.contains("fixed")) {
					stickyOffset = updateOffset();
				}

				if (window.scrollY >= stickyOffset - 50) {
					stickyElement.classList.add("fixed");
				} else {
					stickyElement.classList.remove("fixed");
				}
			};

			const handleResize = () => {
				stickyElement.classList.remove("fixed");
				updateWidth();
				stickyOffset = updateOffset();
				handleScroll();
			};

			updateWidth();

			window.addEventListener("scroll", handleScroll);
			window.addEventListener("resize", handleResize);

			return () => {
				window.removeEventListener("scroll", handleScroll);
				window.removeEventListener("resize", handleResize);
			};
		}
	}

	setupStickyToc();

	document.addEventListener("astro:after-swap", () => {
		setupStickyToc();
	});

	function setupTocToggle() {
		const tocToggle = document.querySelector(
			".toc-icon",
		) as HTMLElement | null;
		const tocItems = document.querySelector(
			".toc-items",
		) as HTMLElement | null;

		if (!tocToggle || !tocItems) return;

		tocToggle.setAttribute("aria-expanded", "false");
		tocToggle.setAttribute("aria-controls", "toc-items");
		tocItems.id = "toc-items";

		const closeToc = (event: Event) => {
			if (
				tocItems.contains(event.target as Node) ||
				tocToggle.contains(event.target as Node)
			)
				return;
			tocToggle.setAttribute("aria-expanded", "false");
		};

		const toggleToc = (event: Event) => {
			event.stopPropagation();
			const isExpanded =
				tocToggle.getAttribute("aria-expanded") === "true";
			tocToggle.setAttribute("aria-expanded", (!isExpanded).toString());
		};

		tocToggle.removeEventListener("click", toggleToc);
		document.removeEventListener("click", closeToc);

		tocToggle.addEventListener("click", toggleToc);
		document.addEventListener("click", closeToc);
	}

	setupTocToggle();

	document.addEventListener("astro:after-swap", setupTocToggle);
</script>
